/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import com.google.common.base.Predicates;

import java.util.*;

public class Library {
    private static Set<Integer>tempInArray;

    public boolean someLibraryMethod() {
        return true;
    }

    public int[] roll(int numberDisplayedOnDice) {
        if (numberDisplayedOnDice == 0) {
            return null;
        }
        int[] outcome = new int[numberDisplayedOnDice];
        for (int i = 0; i < outcome.length; i++) {
            outcome[i] = rando();
        }
        return outcome;
    }

    public int rando() {
        Random rando = new Random();
        return rando.nextInt(7);
    }

    public boolean containsDuplicates(int[] arr) {
        boolean duplicate = false;
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    duplicate = true;

                }

            }
        }
        return duplicate;

    }

    public int calculatingAverages(int[] arr) {
        int averageNumber = 0;
        for (int i = 0; i < arr.length; i++) {
            averageNumber += arr[i];



        }

        return averageNumber / arr.length;
    }

    //this last feature was found on stackoverflow I need to understand if this works correctly DO NOT FORGET TO ASK ALEX OR BEN what is going on
    public int[] arrayOfArrays(int[][] matrix) {
        int average = 0;
        int lowestAverage = 2147483646;
        int thisArray = 0;
        for (int i = 0; i < matrix.length; i++){
            for (int j = 0; j < matrix[i].length; j++){
                average+= matrix[i][j];
            }
            if (average/(matrix[i].length - 1)< lowestAverage){
            lowestAverage = average/(matrix[i].length - 1);
            thisArray = i;
            }
            average=0;

        }
        return matrix[thisArray];
    }
    public String anotherArrayOfArrays(int[][] seattleWeatherArray) {
        int high = 0;
        int low = 2147483646;
        HashSet<Object> tempInArray = new HashSet<>();

        for (int i = 0; i < seattleWeatherArray.length; i++) {
            for (int j = 0; j < seattleWeatherArray[i].length; j++) {
                if (seattleWeatherArray[i][j] > high) {
                    high = seattleWeatherArray[i][j];
                }
                if (seattleWeatherArray[i][j] < low) {
                    low = seattleWeatherArray[i][j];
                }
                if (!tempInArray.contains(seattleWeatherArray[i][j])) {
                    tempInArray.add(seattleWeatherArray[i][j]);
                }
            }
        }
        return tempsNotFound(low, high);
    }
    public String tempsNotFound(int min, int max) {
        String result = new String("High: " + max + "Low: " + min);
        for (int i = min; i <= max; i++) {
            if (!tempInArray.contains(i)) {
                result.join("Never saw temperature: " + i);
            }
        }
        System.out.println(result.toString());
        return result.toString();
        // I do not know how but yesterday I was able to sout and see what I was receiving as an output today I am not so I am unsure on if this is working or not
    }
    public String tally(List<String> list) {
        Map<String, Integer> tally = new HashMap<>();
        for(String element : list) {
            int count = tally.containsKey(element) ? tally.get(element) : 0;
            tally.put(element, count += 1);
        }

        int largestKey = 0;
        String winner = "";
        for (Map.Entry<String, Integer> map : tally.entrySet()) {
            int votes = map.getValue();
            if (votes > largestKey) {
                largestKey = votes;
                winner = map.getKey();
            }
        }

        return winner + " received the most votes!";
    }

}